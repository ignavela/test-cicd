pipeline {
    agent any

    environment {
        BRANCH_NAME = 'v2.0.0'  // Rama para QA
        DOCKER_IMAGE = 'microservicio-qa'
    }

    stages {
        stage('Checkout') {
      steps {
        git branch: "${BRANCH_NAME}", url: 'https://github.com/ignavela/test-cicd.git'
      }
        }

        stage('Check if Docker Image Needs to be Built') {
      steps {
        script {
          // Obtener el hash del último commit
          def latestCommit = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
          echo "Latest Commit: ${latestCommit}"

          // Verificar si existe una imagen con el tag del último commit
          def imageExists = sh(
                        script: "docker images --format '{{.Repository}}:{{.Tag}}' | grep '${DOCKER_IMAGE}:${latestCommit}' || true",
                        returnStdout: true
                    ).trim()

          if (imageExists) {
            echo 'Docker image already exists for this commit. Skipping Docker build.'
            currentBuild.description = "Skipped build: ${latestCommit}"
            shouldProceed = false
                    } else {
            echo 'No Docker image found for this commit. Proceeding to build the Docker image.'
            shouldProceed = true
          }
        }
      }
        }

        stage('Build Docker Image') {
      steps {
        script {
          if (shouldProceed) {
            // Construir la imagen de Docker y etiquetar con el último commit
            def latestCommit = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
            sh "docker build . -t ${DOCKER_IMAGE}:latest -t ${DOCKER_IMAGE}:${latestCommit}"
                    } else {
            echo 'Skipping Docker build.'
          }
        }
      }
        }

        stage('Deploy to QA') {
      steps {
        script {
          if (shouldProceed) {
            echo 'Desplegando la imagen en QA...'
            sh 'docker run -d -p 8082:8081 --name ${DOCKER_IMAGE} ${DOCKER_IMAGE}:latest'
                    } else {
            echo 'Skipping deployment to QA.'
          }
        }
      }
        }

        stage('Cleanup Old Docker Images') {
      steps {
        script {
          if (shouldProceed) {
            // Mantener las últimas 5 imágenes y eliminar las anteriores
            def images = sh(
                            script: "docker images --format '{{.Repository}}:{{.Tag}} {{.CreatedAt}}' | grep '^${DOCKER_IMAGE}' | sort -r | tail -n +6",
                            returnStdout: true
                        ).trim()

            if (images) {
              // Convertir la lista de imágenes a una lista de strings y eliminar
              def oldImages = images.split('\n')
              oldImages.each { image ->
                def imageName = image.split(' ')[0]
                sh "docker rmi -f ${imageName}"
              }
                        } else {
              echo 'No old images to remove.'
            }
                    } else {
            echo 'Skipping cleanup of old Docker images.'
          }
        }
      }
        }
    }
}
